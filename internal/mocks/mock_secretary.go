// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/danilovkiri/dk_go_url_shortener/internal/service/secretary (interfaces: Secretary)

// Package github.com/danilovkiri/dk_go_url_shortener/internal/mocks is a generated GoMock package.

package mocks

import (
	"reflect"

	"github.com/golang/mock/gomock"
)

// MockSecretary is a mock of Secretary interface.
type MockSecretary struct {
	ctrl     *gomock.Controller
	recorder *MockSecretaryMockRecorder
}

// MockSecretaryMockRecorder is the mock recorder for MockSecretary.
type MockSecretaryMockRecorder struct {
	mock *MockSecretary
}

// NewMockSecretary creates a new mock instance.
func NewMockSecretary(ctrl *gomock.Controller) *MockSecretary {
	mock := &MockSecretary{ctrl: ctrl}
	mock.recorder = &MockSecretaryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretary) EXPECT() *MockSecretaryMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockSecretary) Decode(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockSecretaryMockRecorder) Decode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockSecretary)(nil).Decode), arg0)
}

// Encode mocks base method.
func (m *MockSecretary) Encode(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encode", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// Encode indicates an expected call of Encode.
func (mr *MockSecretaryMockRecorder) Encode(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encode", reflect.TypeOf((*MockSecretary)(nil).Encode), arg0)
}
